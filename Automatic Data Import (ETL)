import os
import requests
import psycopg2  

# Environment variables for API key and database connection
ADMIN_API_KEY = os.getenv("ADMIN_API_KEY", "TbJ8np6ccKb1FN7ulNckMLxNXkz9zccZE2CtO8c4vEYcvlNq27agLecbbeZcW7eWCpmt0oxc")  
DB_CONNECTION = os.getenv("DB_CONNECTION")  # This would need to be properly configured

def fetch_data_from_api():
    """Fetch data from API and handle errors."""
    headers = {'Authorization': f'Bearer {ADMIN_API_KEY}'}
    response = requests.get("https://api.example.com/data", headers=headers)
    
    if response.status_code == 200:
        return response.json()  
    else:
        raise Exception("Failed to fetch data from API.")

def is_valid_client(client):
    """Check if client data is valid."""
    return "id" in client and "name" in client and "email" in client

def is_valid_account(account):
    """Check if account data is valid."""
    return "id" in account and "client_id" in account and "balance" in account

def is_valid_transaction(transaction):
    """Check if transaction data is valid."""
    return "id" in transaction and "amount" in transaction and "account_id" in transaction

def validate_and_filter_data(data):
    """Validate and filter data into separate lists for clients, accounts, and transactions."""
    valid_clients, valid_accounts, valid_transactions = [], [], []

    for record in data:
        if "client" in record and is_valid_client(record["client"]):
            valid_clients.append(record["client"])
        if "account" in record and is_valid_account(record["account"]):
            valid_accounts.append(record["account"])
        if "transaction" in record and is_valid_transaction(record["transaction"]):
            valid_transactions.append(record["transaction"])
    
    return valid_clients, valid_accounts, valid_transactions

def load_data_into_database(clients, accounts, transactions):
    """Load validated data into the database."""
    conn = psycopg2.connect(DB_CONNECTION)
    cur = conn.cursor()

    try:
        for client in clients:
            cur.execute(
                "INSERT INTO clients (id, name, email) VALUES (%s, %s, %s)",
                (client['id'], client['name'], client['email'])
            )

        for account in accounts:
            cur.execute(
                "INSERT INTO accounts (id, client_id, balance) VALUES (%s, %s, %s)",
                (account['id'], account['client_id'], account['balance'])
            )

        for transaction in transactions:
            cur.execute(
                "INSERT INTO transactions (id, account_id, amount) VALUES (%s, %s, %s)",
                (transaction['id'], transaction['account_id'], transaction['amount'])
            )

        conn.commit()

    except Exception as e:
        print(f"Database error: {e}")
    finally:
        cur.close()
        conn.close()

def main():
    try:
        # Step 1: Extract
        data = fetch_data_from_api()
        
        # Step 2: Validate and Filter
        valid_clients, valid_accounts, valid_transactions = validate_and_filter_data(data)
        
        # Step 3: Load
        load_data_into_database(valid_clients, valid_accounts, valid_transactions)
        
        # Step 4: Print confirmation message
        print(f"ZYLYTY Data Import Completed [{len(valid_clients)}, {len(valid_accounts)}, {len(valid_transactions)}]")

    except Exception as e:
        print(f"Error: {e}")

if __name__ == "__main__":
    main()
