import os
import requests

# Environment variable setup for API key and database connection
ADMIN_API_KEY = os.getenv("ADMIN_API_KEY", "TbJ8np6ccKb1FN7ulNckMLxNXkz9zccZE2CtO8c4vEYcvlNq27agLecbbeZcW7eWCpmt0oxc")  # Use default for testing
DB_CONNECTION = os.getenv("DB_CONNECTION")  

def fetch_data_from_api():
    """Fetch data from API and handle errors."""
    headers = {'Authorization': f'Bearer {ADMIN_API_KEY}'}
    response = requests.get("https://api.example.com/data", headers=headers)
    
    if response.status_code == 200:
        data = response.json()
        print(f"Fetched {len(data)} records from API")  # Debugging: print fetched data count
        return data
    else:
        raise Exception("Failed to fetch data from API.")

def validate_and_filter_data(data):
    """Validate and filter data into separate lists for clients, accounts, and transactions."""
    valid_clients, valid_accounts, valid_transactions = [], [], []

    for record in data:
        # Check and print record for debugging
        print(f"Processing record: {record}")
        
        # Validate and filter clients
        if "client" in record and is_valid_client(record["client"]):
            valid_clients.append(record["client"])
        else:
            print("Invalid client data found")  # Debugging: invalid client

        # Validate and filter accounts
        if "account" in record and is_valid_account(record["account"]):
            valid_accounts.append(record["account"])
        else:
            print("Invalid account data found")  # Debugging: invalid account

        # Validate and filter transactions
        if "transaction" in record and is_valid_transaction(record["transaction"]):
            valid_transactions.append(record["transaction"])
        else:
            print("Invalid transaction data found")  # Debugging: invalid transaction
    
    # Debugging: print counts of valid items
    print(f"Valid Clients: {len(valid_clients)}, Valid Accounts: {len(valid_accounts)}, Valid Transactions: {len(valid_transactions)}")
    return valid_clients, valid_accounts, valid_transactions

def is_valid_client(client):
    """Check if client data is valid."""
    return client.get("id") and client.get("name")

def is_valid_account(account):
    """Check if account data is valid."""
    return account.get("id") and account.get("balance") is not None

def is_valid_transaction(transaction):
    """Check if transaction data is valid."""
    return transaction.get("id") and transaction.get("amount") is not None

def load_data_into_database(clients, accounts, transactions):
    """Load validated data into the database."""
    # Database load code goes here
    pass

def main():
    try:
        # Step 1: Extract
        data = fetch_data_from_api()
        
        # Step 2: Validate and Filter
        valid_clients, valid_accounts, valid_transactions = validate_and_filter_data(data)
        
        # Step 3: Load
        load_data_into_database(valid_clients, valid_accounts, valid_transactions)
        
        # Step 4: Print confirmation message
        print(f"ZYLYTY Data Import Completed [{len(valid_clients)}, {len(valid_accounts)}, {len(valid_transactions)}]")

    except Exception as e:
        print(f"Error: {e}")

if __name__ == "__main__":
    main()
